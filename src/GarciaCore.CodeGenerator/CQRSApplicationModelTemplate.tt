<#@ template language="C#" inherits="BaseTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="GarciaCore.CodeGenerator" #>
<#@ import namespace="GarciaCore.Infrastructure" #>
<#@ import namespace="GarciaCore.Application" #>
<#@ include file="IncludeWarning.t4" #>
<#@ include file="IncludeUsings.t4" #>  
using MediatR;

namespace <#= Namespace #>
{
    public partial class <#= Item.Name #>Model
    {
<#  
    if (!string.IsNullOrEmpty(IdTypeName))
    {
#>
        public <#= IdTypeName #> Id { get; set; }
<#
    }
#>
<#
    foreach (var property in Item.Properties.Where(x => x.Type != ItemPropertyType.Class || x.MappingType == ItemPropertyMappingType.List))
	{
        string innerTypeName = generator.GetInnerTypeName(property, postfix: "Model");
#>
        public <#= innerTypeName #> <#= property.Name.ToPascalCase() #> { get; set; }
<#
    }
#>
<#
    foreach (var property in Item.Properties.Where(x => x.Type == ItemPropertyType.Class && x.MappingType != ItemPropertyMappingType.List))
	{
        string innerTypeName = generator.GetInnerTypeName(property);
        var idPostfix = property.Type == ItemPropertyType.Class && property.MappingType != ItemPropertyMappingType.List ? "Id" : string.Empty;
#>
        public <#= IdTypeName #> <#= property.Name.ToPascalCase() #><#= idPostfix #> { get; set; }
<#
    }
#>
    }
}

<#+
    protected override Generator CreateGenerator()
	{
		return new CQRSApplicationModelGenerator();
	}
#>