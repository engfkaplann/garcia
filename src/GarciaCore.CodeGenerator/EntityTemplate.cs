//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GarciaCore.CodeGenerator {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using GarciaCore.CodeGenerator;
    using System;
    
    
    public partial class EntityTemplate : BaseTemplate {
        
        
        private GarciaCore.CodeGenerator.Item _ItemField;

        public GarciaCore.CodeGenerator.Item Item {
            get {
                return this._ItemField;
            }
        }

        private string _BaseClassField;

        public string BaseClass {
            get {
                return this._BaseClassField;
            }
        }

        private string _NamespaceField;

        public string Namespace {
            get {
                return this._NamespaceField;
            }
        }

        
        public override string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 10 ""
            this.Write("\nnamespace ");
            
            #line default
            #line hidden
            
            #line 11 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Namespace ));
            
            #line default
            #line hidden
            
            #line 11 ""
            this.Write("\n{\n    public partial class ");
            
            #line default
            #line hidden
            
            #line 13 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Item.Name ));
            
            #line default
            #line hidden
            
            #line 13 ""
            this.Write(" : ");
            
            #line default
            #line hidden
            
            #line 13 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( BaseClass ));
            
            #line default
            #line hidden
            
            #line 13 ""
            this.Write("\n    {\n    }\n}");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public override void Initialize() {
            base.Initialize();
            if ((this.Errors.HasErrors == false)) {
                bool _ItemAcquired = false;
                if (((this.Session != null) 
                            && this.Session.ContainsKey("Item"))) {
                    object data = this.Session["Item"];
                    if (typeof(GarciaCore.CodeGenerator.Item).IsAssignableFrom(data.GetType())) {
                        this._ItemField = ((GarciaCore.CodeGenerator.Item)(data));
                        _ItemAcquired = true;
                    }
                    else {
                        this.Error("The type \'GarciaCore.CodeGenerator.Item\' of the parameter \'Item\' did not match th" +
                                "e type passed to the template");
                    }
                }
                if ((_ItemAcquired == false)) {
                    object data = System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Item");
                    if ((data != null)) {
                        if (typeof(GarciaCore.CodeGenerator.Item).IsAssignableFrom(data.GetType())) {
                            this._ItemField = ((GarciaCore.CodeGenerator.Item)(data));
                            _ItemAcquired = true;
                        }
                        else {
                            this.Error("The type \'GarciaCore.CodeGenerator.Item\' of the parameter \'Item\' did not match th" +
                                    "e type passed to the template");
                        }
                    }
                }
                bool _BaseClassAcquired = false;
                if (((this.Session != null) 
                            && this.Session.ContainsKey("BaseClass"))) {
                    object data = this.Session["BaseClass"];
                    if (typeof(string).IsAssignableFrom(data.GetType())) {
                        this._BaseClassField = ((string)(data));
                        _BaseClassAcquired = true;
                    }
                    else {
                        this.Error("The type \'System.String\' of the parameter \'BaseClass\' did not match the type pass" +
                                "ed to the template");
                    }
                }
                if ((_BaseClassAcquired == false)) {
                    object data = System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("BaseClass");
                    if ((data != null)) {
                        if (typeof(string).IsAssignableFrom(data.GetType())) {
                            this._BaseClassField = ((string)(data));
                            _BaseClassAcquired = true;
                        }
                        else {
                            this.Error("The type \'System.String\' of the parameter \'BaseClass\' did not match the type pass" +
                                    "ed to the template");
                        }
                    }
                }
                bool _NamespaceAcquired = false;
                if (((this.Session != null) 
                            && this.Session.ContainsKey("Namespace"))) {
                    object data = this.Session["Namespace"];
                    if (typeof(string).IsAssignableFrom(data.GetType())) {
                        this._NamespaceField = ((string)(data));
                        _NamespaceAcquired = true;
                    }
                    else {
                        this.Error("The type \'System.String\' of the parameter \'Namespace\' did not match the type pass" +
                                "ed to the template");
                    }
                }
                if ((_NamespaceAcquired == false)) {
                    object data = System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Namespace");
                    if ((data != null)) {
                        if (typeof(string).IsAssignableFrom(data.GetType())) {
                            this._NamespaceField = ((string)(data));
                            _NamespaceAcquired = true;
                        }
                        else {
                            this.Error("The type \'System.String\' of the parameter \'Namespace\' did not match the type pass" +
                                    "ed to the template");
                        }
                    }
                }
            }

        }
    }
}
